package ru.job4j.gc;

/**
 * 0. Понятие сборки мусора
 * Структура памяти
 * Автоматическая сборка мусора отличает Java от языков более низкого уровня, в частности С/С++.
 * Сборка мусора выполняется сборщиком мусора (Garbage Collector (GC)). GC – часть JVM,
 * прикладная программа, которая занимается очищением памяти.
 * Он смотрит на достижимость объекта по ссылке. Это значит, что если мы не можем получить к нему доступ из программы,
 * т.е. у нас нет ссылки на него, то он помечается как мусор и будет удален при следующей сборке мусора.
 * Все объекты хранятся в куче (heap). Куча делится на поколения (generation). Есть всего два поколения: молодое (young) и старое (old).
 * Young generation состоит из eden и survivor space.
 * Большинство объектов не живут долго. Это заключение, позволяет сделать young generation небольшим,
 * а в old generation хранить объекты действительно «живущие» дольше обычного, тем самым эффективно использовать память.
 * Сборка мусора
 * Сборка мусора происходит, когда заполнена вся область памяти.
 * Память делится на два поколения, поэтому есть два типа сборки мусора: minor GC и major GC.
 * Первый происходит, когда переполняется young generation, второй, когда переполняется область из old generation.
 * 1. Объект рождается. Во время исполнения JVM видит, что стоит оператор new.
 * Происходит выделение памяти под объект и возврат ссылки, которая будет ссылаться на занятый участок памяти. Все объекты рождаются в eden
 * 2. Этап 1 выполняет до тех пор, пока не будет заполнен eden
 * Когда eden заполнен происходит minor GC:
 * 3. Объекты, у которых уже нет ссылки удаляются
 * 4. Объекты, у которых есть ссылки попадают в survivor space из eden. Причем survivor space делиться на две части.
 * Между этими частями происходит перемещения объектов. В один момент времени одна из частей пуста, чтоб мочь вместить объекты пришедшие из eden.
 * 5. Объекты, которые уже были в одной части survivor space, перемещаются в другую, при этом растет их «возраст» (age).
 * Сам процесс, перемещения объектов из различных частей survivor space и увеличения их возраста называется «взрослением» (aging).
 * 6. Объекты, которые достигли определенного возраста попадают в old generation. Этот процесс называется «продвижением» promotion.
 * Этапы 1-6 происходят до тех пока не будет заполнен old generation, причем по ходу будут происходить minor GC, для очищения young generation.
 * 7. Когда old generation заполняется производиться major GC
 * 8. Этапы 1-7 происходят на протяжении работы программы
 * <p>
 * Метод finalize(), System.gc() и ключи запуска
 * Этот метод вызывается перед тем как объект уничтожется, однако этот метод является устаревшим и не рекомендуется его использовать.
 * Размер хипа для нашей программы можно задать с помощью ключей -XmxNm -XmsNm соответственно максимальный и начальный размеры хипа.
 * Для этого выбираем “Edit configuration”  => «VM options»
 * Метод info() в нем выводятся некоторые характеристики памяти:
 * - freeMemory(), возвращает количество свободной памяти в байтах
 * - totalMemory(), возвращает общее количество памяти которое может быть использовано
 * - maxMemory(), возвращает максимальное количество памяти которое может быть использовано
 * Чтобы вызвать сборку мусора нужно написать System.gc().
 */

public class GCDemo {
    private static final long KB = 1000;
    private static final long MB = KB * KB;
    private static final Runtime ENVIRONMENT = Runtime.getRuntime();

    public static void info() {
        final long freeMemory = ENVIRONMENT.freeMemory();
        final long totalMemory = ENVIRONMENT.totalMemory();
        final long maxMemory = ENVIRONMENT.maxMemory();
        System.out.println("=== Environment state ===");
        System.out.printf("Free: %d%n", freeMemory / MB);
        System.out.printf("Total: %d%n", totalMemory / MB);
        System.out.printf("Max: %d%n", maxMemory / MB);
    }

    public static void main(String[] args) {
        info();
        for (int i = 0; i < 100; i++) {
            new Person(i, "N" + i);
        }
        System.gc();
        info();
    }
}
